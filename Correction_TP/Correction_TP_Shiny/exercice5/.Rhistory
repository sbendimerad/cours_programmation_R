for(i in 2:n){
cluster = data.frame(cluster = cutree(dendro,i))
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
ncl = length(unique(cluster))
d = numeric(ncl)
for(j in 1:ncl){
d[j] = (m[j,]-g)^2 %>% sum
}
nb = classif %>%
group_by(cluster) %>%
summarise(n=n()) %>%
select(-cluster)
Iinter = (1/n)*sum(nb*d)
R2[i] = Iinter/I
}
PseudoF = numeric(n)
PseudoF[1] = NA
PseudoF[n] = NA
ncl = 2:(n-1)
PseudoF[ncl] = R2[ncl]/(1-R2[ncl])*(n-ncl)/(ncl-1)
indices = data.frame(
nb_classes = 1:n,
R2 = R2,
PseudoF = PseudoF
)
library(ggplot2)
library(tidyr)
indices_long = indices %>%
filter(nb_classes <= cut) %>%
gather(-nb_classes, key = "indice", value = "valeur")
ggplot(indices_long, aes(nb_classes, valeur))+
geom_line()+
geom_point()+
facet_grid(facets = indice~., scales = "free_y")+
labs(
title = "Indices du PseudoF et du R2",
x = "nombre de classes",
y = "Indice"
)+
theme_light()
i=6
cluster = data.frame(cluster = cutree(dendro,i))
cluster
plot(dendro, labels = FALSE)
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
m
ncl = length(unique(cluster))
ncl
unique(cluster)
ncl = nrow(unique(cluster))
ncl
n = nrow(donnees)
nvar = ncol(donnees)
g = donnees %>% colMeans()
I = (n-1)/n*sum(diag(var(donnees)))
Iinter = 0
R2 = numeric(n)
for(i in 2:n){
cluster = data.frame(cluster = cutree(dendro,i))
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
ncl = nrow(unique(cluster))
d = numeric(ncl)
for(j in 1:ncl){
d[j] = (m[j,]-g)^2 %>% sum
}
nb = classif %>%
group_by(cluster) %>%
summarise(n=n()) %>%
select(-cluster)
Iinter = (1/n)*sum(nb*d)
R2[i] = Iinter/I
}
cluster = data.frame(cluster = cutree(dendro,i))
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
ncl = cluster %>% distinct %>% nrow
ncl
cluster %>% distinct
?distinct
unique(cluster)
cluster
cluster = data.frame(cluster = cutree(dendro,i))
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
ncl = cluster %>% distinct %>% nrow
ncl
i
g
g2 = apply(donnees, 2, mean)
g2
i=6
cluster = data.frame(cluster = cutree(dendro,i))
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
m
class = cutree(dendro,k=i)
ncl = unique(class)
d = numeric(length(ncl))
nb = integer(length(ncl))
for(j in ncl){
nb[j] = sum(class==j)
if(nb[j]>1){
m = apply(donnees[class==j,], 2, mean)
} else {
m = donnees[class==j,]
}
d[j] = sum((m-g)^2)
}
m
d
d = numeric(ncl)
ncl = cluster %>% distinct %>% nrow
d = numeric(ncl)
for(j in 1:ncl){
d[j] = (m[j,]-g)^2 %>% sum
}
cluster = data.frame(cluster = cutree(dendro,i))
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
ncl = cluster %>% distinct %>% nrow
d = numeric(ncl)
for(j in 1:ncl){
d[j] = (m[j,]-g)^2 %>% sum
}
d
source("R2PseudoF.R")
indices1 = R2.PseudoF(donnees, dendro)
source("R2.PseudoF.R")
indices2 = R2.PseudoF(donnees, dendro)
n=nrow(donnees)
R2 = numeric(n)
Iinter = 0
g = apply(donnees, 2, mean)
I = (n-1)/n*sum(diag(var(donnees)))
for(i in 2:cut){
class = cutree(dendro,k=i)
ncl = unique(class)
d = numeric(length(ncl))
nb = integer(length(ncl))
for(j in ncl){
nb[j] = sum(class==j)
if(nb[j]>1){
m = apply(donnees[class==j,], 2, mean)
} else {
m = donnees[class==j,]
}
d[j] = sum((m-g)^2)
}
Iinter = (1/n)*sum(nb*d)
R2[i] = Iinter/I
}
R2
n=nrow(donnees)
R2 = numeric(cut)
Iinter = 0
g = apply(donnees, 2, mean)
I = (n-1)/n*sum(diag(var(donnees)))
for(i in 2:cut){
class = cutree(dendro,k=i)
ncl = unique(class)
d = numeric(length(ncl))
nb = integer(length(ncl))
for(j in ncl){
nb[j] = sum(class==j)
if(nb[j]>1){
m = apply(donnees[class==j,], 2, mean)
} else {
m = donnees[class==j,]
}
d[j] = sum((m-g)^2)
}
Iinter = (1/n)*sum(nb*d)
R2[i] = Iinter/I
}
R2
if(cut<=(n-1)) ncl = 2:cut else ncl = 2:(n-1)
PseudoF = R2[ncl]/(1-R2[ncl])*(n-ncl)/(ncl-1)
PseudoF
plot(1:cut,R2, type = 'b', xlab = "Nombre de classes", ylab = "Rsquare")
title("Indice du R2")
plot(ncl[2:cut],PseudoF, type = 'b', xlab = "Nombre de classes", ylab = "PseudoF")
title("Indice du PseudoF")
n=nrow(donnees)
R2 = numeric(cut)
Iinter = 0
g = apply(donnees, 2, mean)
I = (n-1)/n*sum(diag(var(donnees)))
for(i in 2:cut){
class = cutree(dendro,k=i)
ncl = unique(class)
d = numeric(length(ncl))
nb = integer(length(ncl))
for(j in ncl){
nb[j] = sum(class==j)
if(nb[j]>1){
m = apply(donnees[class==j,], 2, mean)
} else {
m = donnees[class==j,]
}
d[j] = sum((m-g)^2)
}
Iinter = (1/n)*sum(nb*d)
R2[i] = Iinter/I
}
PseudoF = numeric(cut)
PseudoF[1] = NA
if(cut<=(n-1)) ncl = 2:cut else{
ncl = 2:(n-1)
PseudoF[cut] = NA
}
PseudoF = R2[ncl]/(1-R2[ncl])*(n-ncl)/(ncl-1)
R2
PseudoF
PseudoF = numeric(cut)
PseudoF[1] = NA
if(cut<=(n-1)) ncl = 2:cut else{
ncl = 2:(n-1)
PseudoF[cut] = NA
}
PseudoF[ncl] = R2[ncl]/(1-R2[ncl])*(n-ncl)/(ncl-1)
PseudoF
par(mfrow=c(1,2))
plot(1:cut,R2, type = 'b', xlab = "Nombre de classes", ylab = "Rsquare")
title("Indice du R2")
plot(ncl[1:cut],PseudoF, type = 'b', xlab = "Nombre de classes", ylab = "PseudoF")
title("Indice du PseudoF")
n = nrow(donnees)
nvar = ncol(donnees)
g = donnees %>% colMeans()
I = (n-1)/n*sum(diag(var(donnees)))
Iinter = 0
R2 = numeric(cut)
for(i in 2:cut){
cluster = data.frame(cluster = cutree(dendro,i))
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
ncl = cluster %>% distinct %>% nrow
d = numeric(ncl)
for(j in 1:ncl){
d[j] = (m[j,]-g)^2 %>% sum
}
nb = classif %>%
group_by(cluster) %>%
summarise(n=n()) %>%
select(-cluster)
Iinter = (1/n)*sum(nb*d)
R2[i] = Iinter/I
}
PseudoF = numeric(cut)
PseudoF[1] = NA
if(cut<=(n-1)) ncl = 2:cut else{
ncl = 2:(n-1)
PseudoF[cut] = NA
}
PseudoF[ncl] = R2[ncl]/(1-R2[ncl])*(n-ncl)/(ncl-1)
indices = data.frame(
nb_classes = 1:cut,
R2 = R2,
PseudoF = PseudoF
)
R2
PseudoF
library(ggplot2)
library(tidyr)
indices_long = indices %>%
gather(-nb_classes, key = "indice", value = "valeur")
ggplot(indices_long, aes(nb_classes, valeur))+
geom_line()+
geom_point()+
facet_grid(facets = indice~., scales = "free_y")+
labs(
title = "Indices du PseudoF et du R2",
x = "nombre de classes",
y = "Indice"
)+
theme_light()
source("R2.PseudoF.R")
R2.PseudoF(donnees, dendro)
source("R2.PseudoF.R")
R2.PseudoF(donnees, dendro)
source("R2.PseudoF.R")
R2.PseudoF(donnees, dendro)
source("R2.PseudoF.R")
R2.PseudoF(donnees, dendro)
source("R2.PseudoF.R")
R2.PseudoF(donnees, dendro)
n = nrow(donnees)
nvar = ncol(donnees)
g = donnees %>% colMeans()
I = (n-1)/n*sum(diag(var(donnees)))
Iinter = 0
R2 = numeric(cut)
for(i in 2:cut){
cluster = data.frame(cluster = cutree(dendro,i))
classif = donnees %>% bind_cols(cluster)
m = classif %>% group_by(cluster) %>% summarise_all(mean) %>% select(-cluster)
ncl = cluster %>% distinct %>% nrow
d = numeric(ncl)
for(j in 1:ncl){
d[j] = (m[j,]-g)^2 %>% sum
}
nb = classif %>%
group_by(cluster) %>%
summarise(n=n()) %>%
select(-cluster)
Iinter = (1/n)*sum(nb*d)
R2[i] = Iinter/I
}
PseudoF = numeric(cut)
PseudoF[1] = NA
if(cut<=(n-1)) ncl = 2:cut else{
ncl = 2:(n-1)
PseudoF[cut] = NA
}
PseudoF[ncl] = R2[ncl]/(1-R2[ncl])*(n-ncl)/(ncl-1)
indices = data.frame(
nb_classes = 1:cut,
R2 = R2,
PseudoF = PseudoF
)
indices_long = indices %>%
gather(-nb_classes, key = "indice", value = "valeur")
ggplot(indices_long, aes_string("nb_classes", "valeur"))+
geom_line()+
geom_point()+
facet_grid(facets = indice~., scales = "free_y")+
labs(
title = "Indices du PseudoF et du R2",
x = "nombre de classes",
y = "Indice"
)+
theme_light()
source("R2.PseudoF.R")
R2.PseudoF(donnees, dendro)
source("R2.PseudoF.R")
indices = R2.PseudoF(data.frame(digit.acp$ind$coord[,1:4]),ward)
source("R2.PseudoF.R")
indices = R2.PseudoF(data.frame(digit.acp$ind$coord[,1:4]),ward)
source("R2PseudoF.R")
donnees = digit.acp$ind$coord[,1:4]
R2.PseudoF(donnees,ward)
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_iris')
?menuSubItem
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_iris')
?cutree
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_iris')
?kmeans
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_iris')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Iris_basique')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Iris_basique')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours 2')
setwd("~/Documents/Pro/Enseignement/IUT/Programmation R/Controles/2019_2020")
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_iris')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_iris')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_iris')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_iris')
# r chunk réservé à la définition du répertoire de travail,
# ainsi qu'au chargement des librairies nécessaires
library(forcats)
library(geojsonio)
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
# commerces = load(file = "~/R_1/commercesParis.RData")
commerces = load(file = "commercesParis.RData")
commerces %>%  filter(ORDRE == 86181)
commerces %>% filter(ORDRE == 86181)
commerces %>% filter(ORDRE == 86181)
commerces %>% filter(ORDRE == 86181)
commerces %>% filter(ORDRE == 86181)
# commerces = load(file = "~/R_1/commercesParis.RData")
load(file = "commercesParis.RData")
commerces %>% filter(ORDRE == 86181)
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
?datatable
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
View(txhousing)
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
library(DT)
library(lubridate)
datatable(txhousing %>% mutate(date = date_decimal(date))) %>%
formatCurrency("volume") %>%
formatDate("date", "toLocaleDateString") %>%
formatStyle(
'city',
color = 'white',
backgroundColor = 'slategrey',
fontWeight = 'bold') %>%
formatStyle(
'median',
background = styleColorBar(range(txhousing$median, na.rm = TRUE), 'lightblue'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center'
)
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
?formatStyle
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
?formatDate
?datatable
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
runApp('~/Documents/Pro/Enseignement/IUT/Programmation R/Shiny/Exemple_cours_complet')
shiny::runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
library(DT)
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/cours_partie6')
library(geojsonio)
library(tibble)
library(geojsonio)
library(tibble)
library(geojsonio)
library(tibble)
etats = geojson_read('https://datahub.io/core/geo-countries/r/countries.geojson',what = "sp")
etats_f = fortify(etats)
ggplot(etats_f, aes(long, lat, group = group)) +
geom_polygon(color = "white") +
theme_void()
leaflet(etats) %>%
setView(lat = 0, lng = 0, zoom = 1) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette(var),
fillOpacity = .5,
color = "gray30",
weight = 1.5,
opacity = 1,
dashArray = "2"
) %>%
addLegend(
pal = palette,
values = ~var,
opacity = 0.8,
title = "Variable aleatoire",
position = "bottomright"
)
library(leaflet)
library(leaflet)
leaflet(etats) %>%
addTiles() %>%
addPolygons()
palette = colorBin("YlOrRd", domain = etats$var)
leaflet(etats) %>%
addTiles() %>%
addPolygons(fillColor = ~palette(var),
fillOpacity = .5)
leaflet(etats) %>%
setView(lat = 0, lng = 0, zoom = 1) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette(var),
fillOpacity = .5,
color = "gray30",
weight = 1.5,
opacity = 1,
dashArray = "2"
) %>%
addLegend(
pal = palette,
values = ~var,
opacity = 0.8,
title = "Variable aleatoire",
position = "bottomright"
)
leaflet(etats) %>%
setView(lat = 0, lng = 0, zoom = 1) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette(var),
fillOpacity = .5,
color = "gray30",
weight = 1.5,
opacity = 1,
dashArray = "2"
) %>%
addLegend(
pal = palette,
values = ~var,
opacity = 0.8,
title = "Variable aleatoire",
position = "bottomright"
)
leaflet(etats) %>%
setView(lat = 0, lng = 0, zoom = 1) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette(var),
fillOpacity = .5,
color = "gray30",
weight = 1.5,
opacity = 1,
dashArray = "2"
) %>%
addLegend(
pal = palette,
values = ~var,
opacity = 0.8,
title = "Variable aleatoire",
position = "bottomright"
)
runApp('C:/Users/J00380/Desktop/mes cours/Documents_cours_Programmation_R/Shiny_SB/exercice5')
